<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Figures</name>
    </assembly>
    <members>
        <member name="T:Figures.Abstract.IGeometricFigure">
            <summary>
            Geometric figure
            </summary>
        </member>
        <member name="M:Figures.Abstract.IGeometricFigure.CalculateArea">
            <summary>
            Calculate the area of a geometric figure
            </summary>
            <returns>Area</returns>
        </member>
        <member name="M:Figures.Abstract.IGeometricFigure.DefaultInitialize">
            <summary>
            Default initialize figure
            </summary>
        </member>
        <member name="T:Figures.Concrete.Round">
            <summary>
            Round - geometric figure
            </summary>
        </member>
        <member name="F:Figures.Concrete.Round._DefaultAccuracy">
            <summary>
            Default accuracy
            </summary>
        </member>
        <member name="F:Figures.Concrete.Round._RoundToStringTemplate">
            <summary>
            To string template
            </summary>
        </member>
        <member name="F:Figures.Concrete.Round.DefaultRadius">
            <summary>
            Default radius
            </summary>
        </member>
        <member name="F:Figures.Concrete.Round._Radius">
            <summary>
            Radius of round
            </summary>
        </member>
        <member name="P:Figures.Concrete.Round.Radius">
            <summary>
            Radius of round
            </summary>
        </member>
        <member name="M:Figures.Concrete.Round.#ctor">
            <summary>
            Create round object
            </summary>
        </member>
        <member name="M:Figures.Concrete.Round.#ctor(System.Double)">
            <summary>
            Create round object
            </summary>
            <param name="radius">Radius of round</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If radius is negative</exception>
        </member>
        <member name="M:Figures.Concrete.Round.CalculateArea">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Round.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Round.Equals(Figures.Concrete.Round,System.Double)">
            <summary>
            Checking with some accuracy the equality
            </summary>
        </member>
        <member name="M:Figures.Concrete.Round.Equals(Figures.Concrete.Round)">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Round.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Round.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Round.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Round.DefaultInitialize">
            <inheritdoc/>
        </member>
        <member name="T:Figures.Concrete.Triangle">
            <summary>
            Triangle - geometric figure
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle._A">
            <summary>
            Triangle sides
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle._B">
            <summary>
            Triangle sides
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle._C">
            <summary>
            Triangle sides
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle._DefaultAccuracy">
            <summary>
            Default accuracy
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle.DefaultA">
            <summary>
            Default sides
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle.DefaultB">
            <summary>
            Default sides
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle.DefaultC">
            <summary>
            Default sides
            </summary>
        </member>
        <member name="F:Figures.Concrete.Triangle._TriangleToStringTemplate">
            <summary>
            To string template
            </summary>
        </member>
        <member name="P:Figures.Concrete.Triangle.A">
            <summary>
            1st side
            </summary>
        </member>
        <member name="P:Figures.Concrete.Triangle.B">
            <summary>
            2nd side
            </summary>
        </member>
        <member name="P:Figures.Concrete.Triangle.C">
            <summary>
            3d side
            </summary>
        </member>
        <member name="M:Figures.Concrete.Triangle.#ctor">
            <summary>
            Create triangle object
            </summary>
        </member>
        <member name="M:Figures.Concrete.Triangle.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create triangle object
            </summary>
            <param name="a">1st side of triangle</param>
            <param name="b">2nd side of triangle</param>
            <param name="c">3d side of triangle</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If side is negative</exception>
        </member>
        <member name="M:Figures.Concrete.Triangle.CalculateArea">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Triangle.IsRightTriangle">
            <summary>
            Is a triangle right-angled?
            </summary>
            <returns>Result</returns>
        </member>
        <member name="M:Figures.Concrete.Triangle.IsPythagoreanTheorem(System.Double,System.Double,System.Double)">
            <summary>
            Check Pythagorean Theorem
            </summary>
            <param name="hypotenuse">Hypotenuse</param>
            <param name="cathetus1">Cathetus</param>
            <param name="cathetus2">Cathetus</param>
            <returns>Result</returns>
        </member>
        <member name="M:Figures.Concrete.Triangle.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Triangle.Equals(Figures.Concrete.Triangle,System.Double)">
            <summary>
            Checking with some accuracy the equality
            </summary>
        </member>
        <member name="M:Figures.Concrete.Triangle.Equals(Figures.Concrete.Triangle)">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Triangle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Triangle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Triangle.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Figures.Concrete.Triangle.DefaultInitialize">
            <inheritdoc/>
        </member>
        <member name="T:Figures.Enums.FigureTypeValues">
            <summary>
            Types of figures
            </summary>
        </member>
        <member name="F:Figures.Enums.FigureTypeValues.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:Figures.Enums.FigureTypeValues.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="T:Figures.Factories.Abstract.IGeometricFigureFactory">
            <summary>
            Geometric figure factory
            </summary>
        </member>
        <member name="M:Figures.Factories.Abstract.IGeometricFigureFactory.CreateFigure">
            <summary>
            Create figure
            </summary>
            <returns>Geometric figure</returns>
        </member>
        <member name="T:Figures.Factories.Concrete.RoundRandomFactory">
            <summary>
            Random round factory
            </summary>
        </member>
        <member name="F:Figures.Factories.Concrete.RoundRandomFactory._Random">
            <summary>
            Random object
            </summary>
        </member>
        <member name="M:Figures.Factories.Concrete.RoundRandomFactory.CreateFigure">
            <inheritdoc/>
        </member>
        <member name="T:Figures.Factories.Concrete.TriangleRandomFactory">
            <summary>
            Random triangle factory
            </summary>
        </member>
        <member name="F:Figures.Factories.Concrete.TriangleRandomFactory._Random">
            <summary>
            Random object
            </summary>
        </member>
        <member name="M:Figures.Factories.Concrete.TriangleRandomFactory.CreateFigure">
            <inheritdoc/>
        </member>
        <member name="T:Figures.Services.Abstract.IFigureByAssemblyLoader">
            <summary>
            Service for load figures by assemly
            </summary>
        </member>
        <member name="M:Figures.Services.Abstract.IFigureByAssemblyLoader.LoadFigures">
            <summary>
            Load figures
            </summary>
            <returns>List of figures</returns>
        </member>
        <member name="T:Figures.Services.Abstract.IFigureFactoryProvider">
            <summary>
            Figure factory provider
            </summary>
        </member>
        <member name="M:Figures.Services.Abstract.IFigureFactoryProvider.GetFactory(Figures.Enums.FigureTypeValues)">
            <summary>
            Get factory
            </summary>
            <param name="figureType">Type of figure</param>
            <returns>Factory</returns>
        </member>
        <member name="T:Figures.Services.Abstract.ITypesFromAssembliesLoader">
            <summary>
            Service for load types from dll assemblies
            </summary>
        </member>
        <member name="M:Figures.Services.Abstract.ITypesFromAssembliesLoader.LoadTypes">
            <summary>
            Load types from assemblies in directory
            </summary>
            <returns>List of types</returns>
        </member>
        <member name="T:Figures.Services.Concrete.DefaultFigureByAssemblyLoader">
            <summary>
            Service for load one default instanse of every type in asseblies in directory
            </summary>
        </member>
        <member name="F:Figures.Services.Concrete.DefaultFigureByAssemblyLoader._TypesFromAssembliesLoader">
            <summary>
            Directory path
            </summary>
        </member>
        <member name="M:Figures.Services.Concrete.DefaultFigureByAssemblyLoader.#ctor(Figures.Services.Abstract.ITypesFromAssembliesLoader)">
            <summary>
            Class constructor
            </summary>
            <param name="typesFromAssembliesLoader">Service for load types from dll assemblies</param>
        </member>
        <member name="M:Figures.Services.Concrete.DefaultFigureByAssemblyLoader.LoadFigures">
            <inheritdoc/>
        </member>
        <member name="T:Figures.Services.Concrete.FigureRandomFactoryProvider">
            <summary>
            Random figure factory provider
            </summary>
        </member>
        <member name="M:Figures.Services.Concrete.FigureRandomFactoryProvider.GetFactory(Figures.Enums.FigureTypeValues)">
            <inheritdoc/>
        </member>
        <member name="T:Figures.Services.Concrete.TypesFromAssembliesLoader">
            <summary>
            Service for load types from dll assemblies
            </summary>
        </member>
        <member name="F:Figures.Services.Concrete.TypesFromAssembliesLoader._DllFileNamePattern">
            <summary>
            File name pattern for .dll
            </summary>
        </member>
        <member name="F:Figures.Services.Concrete.TypesFromAssembliesLoader._AssembliesDirectoryPath">
            <summary>
            Directory path
            </summary>
        </member>
        <member name="M:Figures.Services.Concrete.TypesFromAssembliesLoader.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="assembliesDirectoryPath">Directory path</param>
        </member>
        <member name="M:Figures.Services.Concrete.TypesFromAssembliesLoader.LoadTypes">
            <inheritdoc/>
        </member>
    </members>
</doc>
